%implements s5_b0_tqcjg_Outputs "C"

%function Outputs(block, system) Output
%<SLibCGIRAccessLocalVar(13, 0)> %% rtb_TmpSignalConversionAtVRSail
%<SLibCGIRAccessLocalVar(17, 0)> %% rtb_TmpSignalConversionAtVRS_bd
%<SLibCGIRAccessLocalVar(18, 0)> %% rtb_TmpSignalConversionAtVRS_im
%<SLibCGIRAccessLocalVar(14, 0)> %% rtb_TmpSignalConversionAtVRSa_o
%<SLibCGIRAccessLocalVar(15, 0)> %% rtb_TmpSignalConversionAtVRSa_i
%<SLibCGIRAccessLocalVar(16, 0)> %% rtb_TmpSignalConversionAtVRSa_b
%assign localVarDecl = ""
%openfile localVarDecl
real_T alpha_aw;
real_T delta_s;
real_T alpha_as;
real_T alpha_ak;
real_T v_akv;
real_T nu[4];
real_T M[16];
real_T Ls;
real_T Ds;
real_T alpha_ar;
real_T Lr;
real_T D_hull[4];
real_T eta_dot[4];
real_T nu_dot[4];
real_T e[4];
real_T rtb_TmpSignalConversionAtSFun_m[11];
real_T rtb_DLookupTable;
real_T rtb_DLookupTable4;
real_T rtb_DLookupTable1;
real_T rtb_DLookupTable2;
real_T rtb_DLookupTable3;
real_T rtb_DLookupTable5;
real_T rtb_DLookupTable6;
real_T M_0[16];
real_T b[9];
real_T tmp[9];
real_T b_0[9];
int32_T i;
real_T b_1[3];
int32_T tmp_0[16];
int32_T tmp_1[16];
real_T c[9];
real_T tmp_2[9];
int32_T i_0;
real_T tmp_3[16];
real_T tmp_4[16];
real_T tmp_5[4];
real_T tmp_6[4];
real_T alpha_as_idx_1;
%closefile localVarDecl
%assign tlcOutputsFcnOfS5B0 = OpaqueTLCBlockFcn("Outputs", 5, 0, 0, 5)
%assign tlcOutputsFcnOfS5B1 = OpaqueTLCBlockFcn("Outputs", 5, 1, 0, 5)
%assign tlcOutputsFcnOfS5B15 = OpaqueTLCBlockFcn("Outputs", 5, 15, 0, 5)
%assign tlcOutputsFcnOfS5B16 = OpaqueTLCBlockFcn("Outputs", 5, 16, 0, 5)
%assign tlcOutputsFcnOfS5B17 = OpaqueTLCBlockFcn("Outputs", 5, 17, 0, 5)
%assign tlcOutputsFcnOfS5B18 = OpaqueTLCBlockFcn("Outputs", 5, 18, 0, 5)
if (%<(SLibCGIRIsSampleHit(1, 5))>) {
    /* Constant: '<Root>/IC = [ eta(0) ; nu(0) ]' */
    memcpy(&SailingYachtModel2_B.ICeta0nu0[0], &SailingYachtModel2_P.ICeta0nu0_Value[0], sizeof(real_T) << 3U);
}
%<tlcOutputsFcnOfS5B0>\
if (%<(SLibCGIRIsSampleHit(1, 5))>) {
%<tlcOutputsFcnOfS5B1>\
}
/* SignalConversion: '<Root>/TmpSignal ConversionAtVR Sailing Yacht AnimationInport1' incorporates:
 *  Constant: '<S2>/z'
 *  Gain: '<S2>/z - y2'
 */
rtb_TmpSignalConversionAtVRSail[0] = SailingYachtModel2_B.Integrator[1];
rtb_TmpSignalConversionAtVRSail[1] = SailingYachtModel2_P.z_Value;
rtb_TmpSignalConversionAtVRSail[2] = SailingYachtModel2_P.zy2_Gain * SailingYachtModel2_B.Integrator[0];
if (%<(SLibCGIRIsSampleHit(1, 5))>) {
    /* Gain: '<S2>/z - y1' incorporates:
 *  Constant: '<S2>/Yaw Axis of Rotation'
 */
    SailingYachtModel2_B.zy1[0] = SailingYachtModel2_P.zy1_Gain * SailingYachtModel2_P.YawAxisofRotation_Value[0];
    SailingYachtModel2_B.zy1[1] = SailingYachtModel2_P.zy1_Gain * SailingYachtModel2_P.YawAxisofRotation_Value[1];
    SailingYachtModel2_B.zy1[2] = SailingYachtModel2_P.zy1_Gain * SailingYachtModel2_P.YawAxisofRotation_Value[2];
}
/* SignalConversion: '<Root>/TmpSignal ConversionAtVR Sailing Yacht AnimationInport2' incorporates:
 *  Constant: '<S2>/z1'
 *  Sum: '<S2>/Sum'
 */
rtb_TmpSignalConversionAtVRSa_o[0] = SailingYachtModel2_B.zy1[0];
rtb_TmpSignalConversionAtVRSa_o[1] = SailingYachtModel2_B.zy1[1];
rtb_TmpSignalConversionAtVRSa_o[2] = SailingYachtModel2_B.zy1[2];
rtb_TmpSignalConversionAtVRSa_o[3] = SailingYachtModel2_B.Integrator[3] - SailingYachtModel2_P.z1_Value;
/* SignalConversion: '<Root>/TmpSignal ConversionAtVR Sailing Yacht AnimationInport3' incorporates:
 *  Constant: '<S2>/Roll Axis of Rotation'
 */
rtb_TmpSignalConversionAtVRSa_i[0] = SailingYachtModel2_P.RollAxisofRotation_Value[0];
rtb_TmpSignalConversionAtVRSa_i[1] = SailingYachtModel2_P.RollAxisofRotation_Value[1];
rtb_TmpSignalConversionAtVRSa_i[2] = SailingYachtModel2_P.RollAxisofRotation_Value[2];
rtb_TmpSignalConversionAtVRSa_i[3] = SailingYachtModel2_B.Integrator[2];
/* Sum: '<S3>/Sum' incorporates:
 *  Constant: '<Root>/desired heading'
 */
SailingYachtModel2_B.Sum = SailingYachtModel2_B.Integrator[3] - SailingYachtModel2_P.desiredheading_Value;
/* Gain: '<S3>/P-gain' */
alpha_ak = SailingYachtModel2_P.Pgain_Gain * SailingYachtModel2_B.Sum;
/* Saturate: '<S3>/rudder angle saturation' */
if (alpha_ak > SailingYachtModel2_P.rudderanglesaturation_UpperSat) {
    SailingYachtModel2_B.rudderanglesaturation = SailingYachtModel2_P.rudderanglesaturation_UpperSat;
} else if (alpha_ak < SailingYachtModel2_P.rudderanglesaturation_LowerSat) {
    SailingYachtModel2_B.rudderanglesaturation = SailingYachtModel2_P.rudderanglesaturation_LowerSat;
} else {
    SailingYachtModel2_B.rudderanglesaturation = alpha_ak;
}
/* End of Saturate: '<S3>/rudder angle saturation' */

/* SignalConversion: '<S5>/TmpSignal ConversionAt SFunction Inport1' incorporates:
 *  Constant: '<Root>/Constant'
 *  MATLAB Function: '<S1>/MATLAB Function1'
 */
rtb_TmpSignalConversionAtSFun_m[1] = SailingYachtModel2_P.Constant_Value;
memcpy(&rtb_TmpSignalConversionAtSFun_m[3], &SailingYachtModel2_B.Integrator[0], sizeof(real_T) << 3U);
/* MATLAB Function: '<S1>/MATLAB Function1' */
/* MATLAB Function '4DOF nonlinear sailing yacht model/MATLAB Function1': '<S5>:1' */
/*  interpreted Matlab function "f.m" for the Simulink file "SailingYachtModel.slx" */
/*  This function describes the dynamics of a 4DOF sailing yacht model */
/*  and gives the derivative of the state X and the sail angle delta_s. */
/*  The input vector V_in contains the system state and the control input vector.  */
/*  */
/*  For the model description, notations, equations and parameters, */
/*  see Xiao and Jouffroy, "Modeling and nonlinear heading control of sailing */
/*  yachts", IEEE Journal of Oceanic Engineering, vol. 39, no. 2., pp. 256-268, 2014. */
/*   */
/*  Jerome Jouffroy, Jiaxi He and Lin Xiao, 2014. */
/*  University of Southern Denmark. */
/*  use the system parameters */
/*  (kg),mass of the vehicle */
/*  moment of inertia */
/*  (kg),added mass coef. */
/* '<S5>:1:31' */
/*  the norm of wind velocity */
/* '<S5>:1:32' */
/*  the direction of wind (coming from the north, ie going south) */
/*  (kg/m^3), air density */
/*  (m^2), sail area */
/* '<S5>:1:36' */
/*  (m), roughness height */
/* '<S5>:1:37' */
/*  (m), reference height */
/* '<S5>:1:38' */
/*  (m), (x,y,z) is the CoE */
/* '<S5>:1:39' */
/* '<S5>:1:40' */
/* '<S5>:1:41' */
/*  (m), (x,y,z) is the CoE */
/*  (m), distance along the mast to the CoE */
/*  (m), x-coordinate of the mast  */
/*  (kg/m^3), water density */
/*  (m^2), rudder area */
/*  rudder draft */
/*  rudder efficiency */
/*  (m), (x,y,z) is the CoE */
/*  (m^2), keel area */
/*  keel draft */
/*  keel efficiency */
/*  (m), (x,y,z) is the CoE */
/*  (N), crew weight 20000 */
/*  (m), crew position */
/*  (m), yacht beam */
/*  retrieve the system state from the field input vector "V_in" */
/* '<S5>:1:86' */
/* '<S5>:1:87' */
/* '<S5>:1:88' */
/* '<S5>:1:89' */
/* '<S5>:1:90' */
/* '<S5>:1:91' */
/*  retrieve the input signals from the vector "V_in" */
/* '<S5>:1:96' */
/*  evaluate the matrix M and C in the model */
/*  calculate the tau vector, ie forces and moments generated from: */
/*  the sail */
/* '<S5>:1:110' */
/* '<S5>:1:111' */
alpha_as = log(11.58 * cos(rtb_TmpSignalConversionAtSFun_m[5]) / 0.0005) / 10.050181931686932;
/* '<S5>:1:112' */
/* '<S5>:1:113' */
/* '<S5>:1:114' */
/*  wind expressed in the body frame */
/* '<S5>:1:115' */
/* '<S5>:1:116' */
b[0] = 1.0;
b[3] = 0.0;
b[6] = 0.0;
b[1] = 0.0;
b[4] = cos(-rtb_TmpSignalConversionAtSFun_m[5]);
b[7] = -sin(-rtb_TmpSignalConversionAtSFun_m[5]);
b[2] = 0.0;
b[5] = sin(-rtb_TmpSignalConversionAtSFun_m[5]);
b[8] = cos(-rtb_TmpSignalConversionAtSFun_m[5]);
tmp[0] = cos(-rtb_TmpSignalConversionAtSFun_m[6]);
tmp[3] = -sin(-rtb_TmpSignalConversionAtSFun_m[6]);
tmp[6] = 0.0;
tmp[1] = sin(-rtb_TmpSignalConversionAtSFun_m[6]);
tmp[4] = cos(-rtb_TmpSignalConversionAtSFun_m[6]);
tmp[7] = 0.0;
tmp[2] = 0.0;
tmp[5] = 0.0;
tmp[8] = 1.0;
for (i = 0; i < 3; i++) {
    for (i_0 = 0; i_0 < 3; i_0++) {
        b_0[i + 3 * i_0] = 0.0;
        b_0[i + 3 * i_0] += tmp[3 * i_0] * b[i];
        b_0[i + 3 * i_0] += tmp[3 * i_0 + 1] * b[i + 3];
        b_0[i + 3 * i_0] += tmp[3 * i_0 + 2] * b[i + 6];
    }
}
v_akv = alpha_as * -10.0;
alpha_as_idx_1 = alpha_as * 1.2246467991473533E-15;
alpha_ak = alpha_as * 0.0;
for (i = 0; i < 3; i++) {
    b_1[i] = b_0[i + 6] * alpha_ak + (b_0[i + 3] * alpha_as_idx_1 + b_0[i] * v_akv);
}
/* '<S5>:1:117' */
/* '<S5>:1:118' */
/* '<S5>:1:119' */
alpha_aw = %<(SLibCGCallSubFcn("rt_atan2d_snf", ["(b_1[1] - rtb_TmpSignalConversionAtSFun_m[8]) - (rtb_TmpSignalConversionAtSFun_m[10] * 0.0 - rtb_TmpSignalConversionAtSFun_m[9] * -11.58)", "-((b_1[0] - rtb_TmpSignalConversionAtSFun_m[7]) - (-0.0 - rtb_TmpSignalConversionAtSFun_m[10] * 0.0))"], 0, 5, 0))>;
/*  (sail luffing or not) */
if (alpha_aw > rtb_TmpSignalConversionAtSFun_m[1]) {
    /* '<S5>:1:122' */
    /* '<S5>:1:123' */
    delta_s = rtb_TmpSignalConversionAtSFun_m[1];
} else if (alpha_aw < -rtb_TmpSignalConversionAtSFun_m[1]) {
    /* '<S5>:1:124' */
    /* '<S5>:1:125' */
    delta_s = -rtb_TmpSignalConversionAtSFun_m[1];
} else {
    /* '<S5>:1:127' */
    delta_s = alpha_aw;
}
/* '<S5>:1:130' */
alpha_as = alpha_aw - delta_s;
/* '<S5>:1:132' */
/*  fit the input angle of attack into the interval [-pi,pi] */
if (alpha_as > 3.1415926535897931) {
    /* '<S5>:1:135' */
    /* '<S5>:1:136' */
    alpha_as = (alpha_as + 3.1415926535897931) / 6.2831853071795862;
    if (fabs(alpha_as - %<(SLibCGCallSubFcn("rt_roundd_snf", ["alpha_as"], 0, 5, 11))>) <= 2.2204460492503131E-16 * alpha_as) {
        alpha_as = 0.0;
    } else {
        alpha_as = (alpha_as - floor(alpha_as)) * 6.2831853071795862;
    }
    alpha_as -= 3.1415926535897931;
} else {
    if (alpha_as < -3.1415926535897931) {
        /* '<S5>:1:138' */
        /* '<S5>:1:139' */
        alpha_as = (alpha_as - 3.1415926535897931) / -6.2831853071795862;
        if (fabs(alpha_as - %<(SLibCGCallSubFcn("rt_roundd_snf", ["alpha_as"], 0, 5, 12))>) <= 2.2204460492503131E-16 * alpha_as) {
            alpha_as = 0.0;
        } else {
            alpha_as = (alpha_as - floor(alpha_as)) * -6.2831853071795862;
        }
        alpha_as += 3.1415926535897931;
    }
}
/*  interpolation */
/* '<S5>:1:144' */
alpha_as = alpha_as / 3.1415926535897931 * 180.0;
/* Lookup_n-D: '<S1>/1-D Lookup Table' */
rtb_DLookupTable = look1_binlxpw(alpha_as, SailingYachtModel2_P.alphacoeff_xdata, SailingYachtModel2_P.alphacoeff_yldata, 99999U);
/* Lookup_n-D: '<S1>/1-D Lookup Table4' */
rtb_DLookupTable4 = look1_binlxpw(alpha_as, SailingYachtModel2_P.alphacoeff_xdata, SailingYachtModel2_P.alphacoeff_yddata, 99999U);
/* SignalConversion: '<S6>/TmpSignal ConversionAt SFunction Inport1' incorporates:
 *  MATLAB Function: '<S1>/MATLAB Function2'
 */
rtb_TmpSignalConversionAtSFun_m[0] = SailingYachtModel2_B.rudderanglesaturation;
memcpy(&rtb_TmpSignalConversionAtSFun_m[3], &SailingYachtModel2_B.Integrator[0], sizeof(real_T) << 3U);
/* MATLAB Function: '<S1>/MATLAB Function2' */
/* MATLAB Function '4DOF nonlinear sailing yacht model/MATLAB Function2': '<S6>:1' */
/*  interpreted Matlab function "f.m" for the Simulink file "SailingYachtModel.slx" */
/*  This function describes the dynamics of a 4DOF sailing yacht model */
/*  and gives the derivative of the state X and the sail angle delta_s. */
/*  The input vector V_in contains the system state and the control input vector.  */
/*  */
/*  For the model description, notations, equations and parameters, */
/*  see Xiao and Jouffroy, "Modeling and nonlinear heading control of sailing */
/*  yachts", IEEE Journal of Oceanic Engineering, vol. 39, no. 2., pp. 256-268, 2014. */
/*   */
/*  Jerome Jouffroy, Jiaxi He and Lin Xiao, 2014. */
/*  University of Southern Denmark. */
/*  use the system parameters */
/*  (kg),mass of the vehicle */
/*  moment of inertia */
/*  (kg),added mass coef. */
/*  the norm of wind velocity */
/*  the direction of wind (coming from the north, ie going south) */
/*  (kg/m^3), air density */
/*  (m^2), sail area */
/*  (m), roughness height */
/*  (m), reference height */
/*  (m), (x,y,z) is the CoE */
/*  (m), distance along the mast to the CoE */
/*  (m), x-coordinate of the mast  */
/*  (kg/m^3), water density */
/*  (m^2), rudder area */
/*  rudder draft */
/*  rudder efficiency */
/*  (m), (x,y,z) is the CoE */
/* '<S6>:1:50' */
/* '<S6>:1:51' */
/* '<S6>:1:52' */
/*  (m), (x,y,z) is the CoE */
/*  (m^2), keel area */
/*  keel draft */
/*  keel efficiency */
/*  (m), (x,y,z) is the CoE */
/*  (N), crew weight 20000 */
/*  (m), crew position */
/*  (m), yacht beam */
/*  retrieve the system state from the field input vector "V_in" */
/* '<S6>:1:87' */
/* '<S6>:1:88' */
/* '<S6>:1:89' */
/* '<S6>:1:90' */
/*  retrieve the input signals from the vector "V_in" */
/* '<S6>:1:94' */
/*  evaluate the matrix M and C in the model */
/*  calculate the tau vector, ie forces and moments generated from: */
/*  the sail */
/*  wind expressed in the body frame */
/*  the rudder */
/* '<S6>:1:120' */
/* '<S6>:1:121' */
/* '<S6>:1:122' */
/* '<S6>:1:123' */
alpha_as = %<(SLibCGCallSubFcn("rt_atan2d_snf", ["(-rtb_TmpSignalConversionAtSFun_m[8] - rtb_TmpSignalConversionAtSFun_m[10] * -8.2) + rtb_TmpSignalConversionAtSFun_m[9] * -0.78", "-(rtb_TmpSignalConversionAtSFun_m[10] * 0.0 + -rtb_TmpSignalConversionAtSFun_m[7])"], 0, 5, 1))> - rtb_TmpSignalConversionAtSFun_m[0];
/* '<S6>:1:125' */
/*  fit the input angle of attack into the interval [-pi,pi] */
if (alpha_as > 3.1415926535897931) {
    /* '<S6>:1:128' */
    /* '<S6>:1:129' */
    alpha_as = (alpha_as + 3.1415926535897931) / 6.2831853071795862;
    if (fabs(alpha_as - %<(SLibCGCallSubFcn("rt_roundd_snf", ["alpha_as"], 0, 5, 13))>) <= 2.2204460492503131E-16 * alpha_as) {
        alpha_as = 0.0;
    } else {
        alpha_as = (alpha_as - floor(alpha_as)) * 6.2831853071795862;
    }
    alpha_as -= 3.1415926535897931;
} else {
    if (alpha_as < -3.1415926535897931) {
        /* '<S6>:1:131' */
        /* '<S6>:1:132' */
        alpha_as = (alpha_as - 3.1415926535897931) / -6.2831853071795862;
        if (fabs(alpha_as - %<(SLibCGCallSubFcn("rt_roundd_snf", ["alpha_as"], 0, 5, 14))>) <= 2.2204460492503131E-16 * alpha_as) {
            alpha_as = 0.0;
        } else {
            alpha_as = (alpha_as - floor(alpha_as)) * -6.2831853071795862;
        }
        alpha_as += 3.1415926535897931;
    }
}
/*  interpolation */
/* '<S6>:1:137' */
alpha_as = alpha_as / 3.1415926535897931 * 180.0;
/* Lookup_n-D: '<S1>/1-D Lookup Table1' */
rtb_DLookupTable1 = look1_binlxpw(alpha_as, SailingYachtModel2_P.ruddercoeff_xdata, SailingYachtModel2_P.ruddercoeff_yldata, 99999U);
/* Lookup_n-D: '<S1>/1-D Lookup Table5' */
rtb_DLookupTable5 = look1_binlxpw(alpha_as, SailingYachtModel2_P.ruddercoeff_xdata, SailingYachtModel2_P.ruddercoeff_yddata, 99999U);
/* SignalConversion: '<S7>/TmpSignal ConversionAt SFunction Inport1' incorporates:
 *  MATLAB Function: '<S1>/MATLAB Function3'
 */
memcpy(&rtb_TmpSignalConversionAtSFun_m[3], &SailingYachtModel2_B.Integrator[0], sizeof(real_T) << 3U);
/* MATLAB Function: '<S1>/MATLAB Function3' */
/* MATLAB Function '4DOF nonlinear sailing yacht model/MATLAB Function3': '<S7>:1' */
/*  interpreted Matlab function "f.m" for the Simulink file "SailingYachtModel.slx" */
/*  This function describes the dynamics of a 4DOF sailing yacht model */
/*  and gives the derivative of the state X and the sail angle delta_s. */
/*  The input vector V_in contains the system state and the control input vector.  */
/*  */
/*  For the model description, notations, equations and parameters, */
/*  see Xiao and Jouffroy, "Modeling and nonlinear heading control of sailing */
/*  yachts", IEEE Journal of Oceanic Engineering, vol. 39, no. 2., pp. 256-268, 2014. */
/*   */
/*  Jerome Jouffroy, Jiaxi He and Lin Xiao, 2014. */
/*  University of Southern Denmark. */
/*  use the system parameters */
/*  (kg),mass of the vehicle */
/*  moment of inertia */
/*  (kg),added mass coef. */
/*  the norm of wind velocity */
/*  the direction of wind (coming from the north, ie going south) */
/*  (kg/m^3), air density */
/*  (m^2), sail area */
/*  (m), roughness height */
/*  (m), reference height */
/*  (m), (x,y,z) is the CoE */
/*  (m), distance along the mast to the CoE */
/*  (m), x-coordinate of the mast  */
/*  (kg/m^3), water density */
/*  (m^2), rudder area */
/*  rudder draft */
/*  rudder efficiency */
/*  (m), (x,y,z) is the CoE */
/*  (m^2), keel area */
/*  keel draft */
/*  keel efficiency */
/*  (m), (x,y,z) is the CoE */
/* '<S7>:1:60' */
/* '<S7>:1:61' */
/* '<S7>:1:62' */
/*  (m), (x,y,z) is the CoE */
/*  (N), crew weight 20000 */
/*  (m), crew position */
/*  (m), yacht beam */
/*  retrieve the system state from the field input vector "V_in" */
/* '<S7>:1:88' */
/* '<S7>:1:89' */
/* '<S7>:1:90' */
/* '<S7>:1:91' */
/*  retrieve the input signals from the vector "V_in" */
/*  evaluate the matrix M and C in the model */
/*  calculate the tau vector, ie forces and moments generated from: */
/*  the sail */
/*  wind expressed in the body frame */
/*  calculate the damping forces and moments: */
/*  from the keel */
/* '<S7>:1:124' */
/* '<S7>:1:125' */
/* '<S7>:1:126' */
alpha_ak = %<(SLibCGCallSubFcn("rt_atan2d_snf", ["(-rtb_TmpSignalConversionAtSFun_m[8] - rtb_TmpSignalConversionAtSFun_m[10] * 0.0) + rtb_TmpSignalConversionAtSFun_m[9] * -0.58", "-(rtb_TmpSignalConversionAtSFun_m[10] * 0.0 + -rtb_TmpSignalConversionAtSFun_m[7])"], 0, 5, 2))>;
/* '<S7>:1:129' */
/*  fit the input angle of attack into the interval [-pi,pi] */
if (alpha_ak > 3.1415926535897931) {
    /* '<S7>:1:132' */
    /* '<S7>:1:133' */
    alpha_as = (alpha_ak + 3.1415926535897931) / 6.2831853071795862;
    if (fabs(alpha_as - %<(SLibCGCallSubFcn("rt_roundd_snf", ["alpha_as"], 0, 5, 15))>) <= 2.2204460492503131E-16 * alpha_as) {
        alpha_as = 0.0;
    } else {
        alpha_as = (alpha_as - floor(alpha_as)) * 6.2831853071795862;
    }
    alpha_ak = alpha_as - 3.1415926535897931;
} else {
    if (alpha_ak < -3.1415926535897931) {
        /* '<S7>:1:135' */
        /* '<S7>:1:136' */
        alpha_as = (alpha_ak - 3.1415926535897931) / -6.2831853071795862;
        if (fabs(alpha_as - %<(SLibCGCallSubFcn("rt_roundd_snf", ["alpha_as"], 0, 5, 16))>) <= 2.2204460492503131E-16 * alpha_as) {
            alpha_as = 0.0;
        } else {
            alpha_as = (alpha_as - floor(alpha_as)) * -6.2831853071795862;
        }
        alpha_ak = alpha_as + 3.1415926535897931;
    }
}
/*  interpolation */
/* '<S7>:1:141' */
alpha_ak = alpha_ak / 3.1415926535897931 * 180.0;
/* Lookup_n-D: '<S1>/1-D Lookup Table2' */
rtb_DLookupTable2 = look1_binlxpw(alpha_ak, SailingYachtModel2_P.keelcoeff_xdata, SailingYachtModel2_P.keelcoeff_yldata, 99999U);
/* Lookup_n-D: '<S1>/1-D Lookup Table6' */
rtb_DLookupTable6 = look1_binlxpw(alpha_ak, SailingYachtModel2_P.keelcoeff_xdata, SailingYachtModel2_P.keelcoeff_yddata, 99999U);
/* SignalConversion: '<S8>/TmpSignal ConversionAt SFunction Inport1' incorporates:
 *  MATLAB Function: '<S1>/MATLAB Function4'
 */
memcpy(&rtb_TmpSignalConversionAtSFun_m[3], &SailingYachtModel2_B.Integrator[0], sizeof(real_T) << 3U);
/* MATLAB Function: '<S1>/MATLAB Function4' */
/* MATLAB Function '4DOF nonlinear sailing yacht model/MATLAB Function4': '<S8>:1' */
/*  interpreted Matlab function "f.m" for the Simulink file "SailingYachtModel.slx" */
/*  This function describes the dynamics of a 4DOF sailing yacht model */
/*  and gives the derivative of the state X and the sail angle delta_s. */
/*  The input vector V_in contains the system state and the control input vector.  */
/*  */
/*  For the model description, notations, equations and parameters, */
/*  see Xiao and Jouffroy, "Modeling and nonlinear heading control of sailing */
/*  yachts", IEEE Journal of Oceanic Engineering, vol. 39, no. 2., pp. 256-268, 2014. */
/*   */
/*  Jerome Jouffroy, Jiaxi He and Lin Xiao, 2014. */
/*  University of Southern Denmark. */
/*  use the system parameters */
/*  (kg),mass of the vehicle */
/*  moment of inertia */
/*  (kg),added mass coef. */
/*  the norm of wind velocity */
/*  the direction of wind (coming from the north, ie going south) */
/*  (kg/m^3), air density */
/*  (m^2), sail area */
/*  (m), roughness height */
/*  (m), reference height */
/*  (m), (x,y,z) is the CoE */
/*  (m), distance along the mast to the CoE */
/*  (m), x-coordinate of the mast  */
/*  (kg/m^3), water density */
/*  (m^2), rudder area */
/*  rudder draft */
/*  rudder efficiency */
/*  (m), (x,y,z) is the CoE */
/*  (m^2), keel area */
/*  keel draft */
/*  keel efficiency */
/*  (m), (x,y,z) is the CoE */
/* '<S8>:1:60' */
/* '<S8>:1:61' */
/* '<S8>:1:62' */
/*  (m), (x,y,z) is the CoE */
/*  (N), crew weight 20000 */
/*  (m), crew position */
/*  (m), yacht beam */
/*  retrieve the system state from the field input vector "V_in" */
/* '<S8>:1:88' */
/* '<S8>:1:89' */
/* '<S8>:1:90' */
/* '<S8>:1:91' */
/*  retrieve the input signals from the vector "V_in" */
/*  evaluate the matrix M and C in the model */
/*  calculate the tau vector, ie forces and moments generated from: */
/*  the sail */
/*  wind expressed in the body frame */
/*  calculate the damping forces and moments: */
/*  from the keel */
/* '<S8>:1:123' */
alpha_as = rtb_TmpSignalConversionAtSFun_m[10] * 0.0 + -rtb_TmpSignalConversionAtSFun_m[7];
/* '<S8>:1:124' */
v_akv = (-rtb_TmpSignalConversionAtSFun_m[8] - rtb_TmpSignalConversionAtSFun_m[10] * 0.0) + rtb_TmpSignalConversionAtSFun_m[9] * -0.58;
/*  from the hull */
/* '<S8>:1:131' */
/* '<S8>:1:133' */
alpha_as = sqrt(alpha_as * alpha_as + v_akv * v_akv);
/* Lookup_n-D: '<S1>/1-D Lookup Table3' */
rtb_DLookupTable3 = look1_binlxpw(alpha_as, SailingYachtModel2_P.hull_xdata, SailingYachtModel2_P.hull_ydata, 99999U);
/* SignalConversion: '<S4>/TmpSignal ConversionAt SFunction Inport1' incorporates:
 *  Constant: '<Root>/Constant'
 *  MATLAB Function: '<S1>/MATLAB Function'
 */
rtb_TmpSignalConversionAtSFun_m[1] = SailingYachtModel2_P.Constant_Value;
rtb_TmpSignalConversionAtSFun_m[2] = %<(SLibCG_SE(SLibCG_Grnd(0, 0, 1, "", -1, "", 0)))>;
memcpy(&rtb_TmpSignalConversionAtSFun_m[3], &SailingYachtModel2_B.Integrator[0], sizeof(real_T) << 3U);
/* MATLAB Function: '<S1>/MATLAB Function' */
/* MATLAB Function '4DOF nonlinear sailing yacht model/MATLAB Function': '<S4>:1' */
/*  interpreted Matlab function "f.m" for the Simulink file "SailingYachtModel.slx" */
/*  This function describes the dynamics of a 4DOF sailing yacht model */
/*  and gives the derivative of the state X and the sail angle delta_s. */
/*  The input vector V_in contains the system state and the control input vector.  */
/*  */
/*  For the model description, notations, equations and parameters, */
/*  see Xiao and Jouffroy, "Modeling and nonlinear heading control of sailing */
/*  yachts", IEEE Journal of Oceanic Engineering, vol. 39, no. 2., pp. 256-268, 2014. */
/*   */
/*  Jerome Jouffroy, Jiaxi He and Lin Xiao, 2014. */
/*  University of Southern Denmark. */
/*  use the system parameters */
/* '<S4>:1:19' */
/*  (kg),mass of the vehicle */
/* '<S4>:1:20' */
/* '<S4>:1:21' */
/* '<S4>:1:22' */
/*  moment of inertia */
/* '<S4>:1:23' */
/* '<S4>:1:24' */
/* '<S4>:1:25' */
/* '<S4>:1:26' */
/* '<S4>:1:27' */
/* '<S4>:1:28' */
/* '<S4>:1:29' */
/*  (kg),added mass coef. */
/* '<S4>:1:31' */
/*  the norm of wind velocity */
/* '<S4>:1:32' */
/*  the direction of wind (coming from the north, ie going south) */
/* '<S4>:1:34' */
/*  (kg/m^3), air density */
/* '<S4>:1:35' */
/*  (m^2), sail area */
/* '<S4>:1:36' */
/*  (m), roughness height */
/* '<S4>:1:37' */
/*  (m), reference height */
/* '<S4>:1:38' */
/*  (m), (x,y,z) is the CoE */
/* '<S4>:1:39' */
/* '<S4>:1:40' */
/* '<S4>:1:41' */
/*  (m), (x,y,z) is the CoE */
/* '<S4>:1:42' */
/*  (m), distance along the mast to the CoE */
/* '<S4>:1:43' */
/*  (m), x-coordinate of the mast  */
/* '<S4>:1:45' */
/*  (kg/m^3), water density */
/* '<S4>:1:46' */
/*  (m^2), rudder area */
/* '<S4>:1:47' */
/*  rudder draft */
/* '<S4>:1:48' */
/*  rudder efficiency */
/*  (m), (x,y,z) is the CoE */
/* '<S4>:1:51' */
/* '<S4>:1:52' */
/* '<S4>:1:53' */
/*  (m), (x,y,z) is the CoE */
/* '<S4>:1:55' */
/*  (m^2), keel area */
/* '<S4>:1:56' */
/*  keel draft */
/* '<S4>:1:57' */
/*  keel efficiency */
/*  (m), (x,y,z) is the CoE */
/* '<S4>:1:60' */
/* '<S4>:1:61' */
/* '<S4>:1:62' */
/*  (m), (x,y,z) is the CoE */
/* '<S4>:1:66' */
/* '<S4>:1:67' */
/* '<S4>:1:68' */
/*  (m), (x,y,z) is the CoE */
/* '<S4>:1:70' */
/*  (N), crew weight 20000 */
/* '<S4>:1:71' */
/*  (m), crew position */
/* '<S4>:1:72' */
/*  (m), yacht beam */
/* '<S4>:1:74' */
/* '<S4>:1:75' */
/* '<S4>:1:76' */
/* '<S4>:1:77' */
/*  retrieve the system state from the field input vector "V_in" */
/* '<S4>:1:86' */
/* '<S4>:1:87' */
/* '<S4>:1:88' */
/* '<S4>:1:89' */
/* '<S4>:1:90' */
/* '<S4>:1:91' */
/* '<S4>:1:92' */
/*  retrieve the input signals from the vector "V_in" */
/* '<S4>:1:96' */
/* '<S4>:1:97' */
/*  evaluate the matrix M and C in the model */
/* '<S4>:1:100' */
/* '<S4>:1:101' */
/* '<S4>:1:103' */
/* '<S4>:1:104' */
/* '<S4>:1:106' */
tmp_0[0] = 25900;
tmp_0[4] = 0;
tmp_0[8] = 0;
tmp_0[12] = 0;
tmp_0[1] = 0;
tmp_0[5] = 25900;
tmp_0[9] = 0;
tmp_0[13] = 0;
tmp_0[2] = 0;
tmp_0[6] = 0;
tmp_0[10] = 133690;
tmp_0[14] = -2180;
tmp_0[3] = 0;
tmp_0[7] = 0;
tmp_0[11] = -2180;
tmp_0[15] = 24760;
tmp_1[0] = 970;
tmp_1[4] = 0;
tmp_1[8] = 0;
tmp_1[12] = 0;
tmp_1[1] = 0;
tmp_1[5] = 17430;
tmp_1[9] = -13160;
tmp_1[13] = -6190;
tmp_1[2] = 0;
tmp_1[6] = -13160;
tmp_1[10] = 106500;
tmp_1[14] = 4730;
tmp_1[3] = 0;
tmp_1[7] = -6190;
tmp_1[11] = 4730;
tmp_1[15] = 101650;
for (i = 0; i < 4; i++) {
    M[i << 2] = tmp_0[i << 2] + tmp_1[i << 2];
    M[1 + (i << 2)] = tmp_0[(i << 2) + 1] + tmp_1[(i << 2) + 1];
    M[2 + (i << 2)] = tmp_0[(i << 2) + 2] + tmp_1[(i << 2) + 2];
    M[3 + (i << 2)] = tmp_0[(i << 2) + 3] + tmp_1[(i << 2) + 3];
}
/*  calculate the tau vector, ie forces and moments generated from: */
/*  the sail */
/* '<S4>:1:110' */
/* '<S4>:1:111' */
alpha_as = log(11.58 * cos(rtb_TmpSignalConversionAtSFun_m[5]) / 0.0005) / 10.050181931686932;
/* '<S4>:1:112' */
/* '<S4>:1:113' */
/* '<S4>:1:114' */
/*  wind expressed in the body frame */
/* '<S4>:1:115' */
/* '<S4>:1:116' */
c[0] = 1.0;
c[3] = 0.0;
c[6] = 0.0;
c[1] = 0.0;
c[4] = cos(-rtb_TmpSignalConversionAtSFun_m[5]);
c[7] = -sin(-rtb_TmpSignalConversionAtSFun_m[5]);
c[2] = 0.0;
c[5] = sin(-rtb_TmpSignalConversionAtSFun_m[5]);
c[8] = cos(-rtb_TmpSignalConversionAtSFun_m[5]);
tmp_2[0] = cos(-rtb_TmpSignalConversionAtSFun_m[6]);
tmp_2[3] = -sin(-rtb_TmpSignalConversionAtSFun_m[6]);
tmp_2[6] = 0.0;
tmp_2[1] = sin(-rtb_TmpSignalConversionAtSFun_m[6]);
tmp_2[4] = cos(-rtb_TmpSignalConversionAtSFun_m[6]);
tmp_2[7] = 0.0;
tmp_2[2] = 0.0;
tmp_2[5] = 0.0;
tmp_2[8] = 1.0;
for (i = 0; i < 3; i++) {
    for (i_0 = 0; i_0 < 3; i_0++) {
        b[i + 3 * i_0] = 0.0;
        b[i + 3 * i_0] += tmp_2[3 * i_0] * c[i];
        b[i + 3 * i_0] += tmp_2[3 * i_0 + 1] * c[i + 3];
        b[i + 3 * i_0] += tmp_2[3 * i_0 + 2] * c[i + 6];
    }
}
v_akv = alpha_as * -10.0;
alpha_as_idx_1 = alpha_as * 1.2246467991473533E-15;
alpha_ak = alpha_as * 0.0;
for (i = 0; i < 3; i++) {
    b_1[i] = b[i + 6] * alpha_ak + (b[i + 3] * alpha_as_idx_1 + b[i] * v_akv);
}
alpha_ak = (b_1[0] - rtb_TmpSignalConversionAtSFun_m[7]) - (-0.0 - rtb_TmpSignalConversionAtSFun_m[10] * 0.0);
v_akv = (b_1[1] - rtb_TmpSignalConversionAtSFun_m[8]) - (rtb_TmpSignalConversionAtSFun_m[10] * 0.0 - rtb_TmpSignalConversionAtSFun_m[9] * -11.58);
/* '<S4>:1:117' */
/* '<S4>:1:118' */
/* '<S4>:1:119' */
alpha_aw = %<(SLibCGCallSubFcn("rt_atan2d_snf", ["v_akv", "-alpha_ak"], 0, 5, 6))>;
/*  (sail luffing or not) */
if (alpha_aw > rtb_TmpSignalConversionAtSFun_m[1]) {
    /* '<S4>:1:122' */
    /* '<S4>:1:123' */
    delta_s = rtb_TmpSignalConversionAtSFun_m[1];
} else if (alpha_aw < -rtb_TmpSignalConversionAtSFun_m[1]) {
    /* '<S4>:1:124' */
    /* '<S4>:1:125' */
    delta_s = -rtb_TmpSignalConversionAtSFun_m[1];
} else {
    /* '<S4>:1:127' */
    delta_s = alpha_aw;
}
/* '<S4>:1:135' */
Ls = (alpha_ak * alpha_ak + v_akv * v_akv) * 102.0 * rtb_DLookupTable;
/* '<S4>:1:136' */
Ds = (alpha_ak * alpha_ak + v_akv * v_akv) * 102.0 * rtb_DLookupTable4;
/* '<S4>:1:138' */
/*  the rudder */
/* '<S4>:1:142' */
alpha_as = rtb_TmpSignalConversionAtSFun_m[10] * 0.0 + -rtb_TmpSignalConversionAtSFun_m[7];
/* '<S4>:1:143' */
v_akv = (-rtb_TmpSignalConversionAtSFun_m[8] - rtb_TmpSignalConversionAtSFun_m[10] * -8.2) + rtb_TmpSignalConversionAtSFun_m[9] * -0.78;
/* '<S4>:1:144' */
alpha_ar = %<(SLibCGCallSubFcn("rt_atan2d_snf", ["v_akv", "-alpha_as"], 0, 5, 5))>;
/* [Clr,Cdr] = ruddercoef(alpha_a); */
/* '<S4>:1:151' */
/* '<S4>:1:153' */
Lr = (alpha_as * alpha_as + v_akv * v_akv) * 599.625 * rtb_DLookupTable1;
/* '<S4>:1:154' */
rtb_DLookupTable4 = (rtb_DLookupTable1 * rtb_DLookupTable1 * 1.17 / 18.145839167134646 + rtb_DLookupTable5) * ((alpha_as * alpha_as + v_akv * v_akv) * 599.625);
/* '<S4>:1:156' */
/*  the tau vector is finally given by: */
/* '<S4>:1:160' */
/*  calculate the damping forces and moments: */
/*  from the keel */
/* '<S4>:1:164' */
alpha_as = rtb_TmpSignalConversionAtSFun_m[10] * 0.0 + -rtb_TmpSignalConversionAtSFun_m[7];
/* '<S4>:1:165' */
v_akv = (-rtb_TmpSignalConversionAtSFun_m[8] - rtb_TmpSignalConversionAtSFun_m[10] * 0.0) + rtb_TmpSignalConversionAtSFun_m[9] * -0.58;
/* '<S4>:1:166' */
alpha_ak = %<(SLibCGCallSubFcn("rt_atan2d_snf", ["v_akv", "-alpha_as"], 0, 5, 4))>;
/* '<S4>:1:172' */
/* '<S4>:1:174' */
rtb_DLookupTable1 = (alpha_as * alpha_as + v_akv * v_akv) * 4458.75 * rtb_DLookupTable2;
/* '<S4>:1:175' */
alpha_as = (rtb_DLookupTable2 * rtb_DLookupTable2 * 8.7 / 27.269464056130911 + rtb_DLookupTable6) * ((alpha_as * alpha_as + v_akv * v_akv) * 4458.75);
/* '<S4>:1:177' */
/*  from the hull */
/* '<S4>:1:180' */
/* '<S4>:1:181' */
/* '<S4>:1:183' */
v_akv = %<(SLibCGCallSubFcn("rt_atan2d_snf", ["((-rtb_TmpSignalConversionAtSFun_m[8] - rtb_TmpSignalConversionAtSFun_m[10] * 0.0) + rtb_TmpSignalConversionAtSFun_m[9] * -1.18) / cos(rtb_TmpSignalConversionAtSFun_m[5])", "-(rtb_TmpSignalConversionAtSFun_m[10] * 0.0 + -rtb_TmpSignalConversionAtSFun_m[7])"], 0, 5, 3))>;
/* '<S4>:1:187' */
/*  from heel and yaw */
/*  (compute first eta_dot and thereby phi_dot and psi_dot) */
/* '<S4>:1:191' */
/* '<S4>:1:192' */
M_0[0] = cos(rtb_TmpSignalConversionAtSFun_m[6]);
M_0[4] = -sin(rtb_TmpSignalConversionAtSFun_m[6]) * cos(rtb_TmpSignalConversionAtSFun_m[5]);
M_0[8] = 0.0;
M_0[12] = 0.0;
M_0[1] = sin(rtb_TmpSignalConversionAtSFun_m[6]);
M_0[5] = cos(rtb_TmpSignalConversionAtSFun_m[6]) * cos(rtb_TmpSignalConversionAtSFun_m[5]);
M_0[9] = 0.0;
M_0[13] = 0.0;
M_0[2] = 0.0;
M_0[6] = 0.0;
M_0[10] = 1.0;
M_0[14] = 0.0;
M_0[3] = 0.0;
M_0[7] = 0.0;
M_0[11] = 0.0;
M_0[15] = cos(rtb_TmpSignalConversionAtSFun_m[5]);
for (i = 0; i < 4; i++) {
    alpha_as_idx_1 = M_0[i + 12] * rtb_TmpSignalConversionAtSFun_m[10] + (M_0[i + 8] * rtb_TmpSignalConversionAtSFun_m[9] + (M_0[i + 4] * rtb_TmpSignalConversionAtSFun_m[8] + M_0[i] * rtb_TmpSignalConversionAtSFun_m[7]));
    eta_dot[i] = alpha_as_idx_1;
}
/* '<S4>:1:193' */
/* '<S4>:1:194' */
/* '<S4>:1:196' */
/*  compute total damping vector D */
/* '<S4>:1:199' */
/*  righting moment plus internal moving mass system (ie transversal weight) */
/* '<S4>:1:202' */
rtb_DLookupTable = rtb_TmpSignalConversionAtSFun_m[5] * 180.0 / 3.1415926535897931;
/* '<S4>:1:203' */
/* '<S4>:1:204' */
/* '<S4>:1:205' */
/*  computation of nu_dot */
/* '<S4>:1:208' */
tmp_3[0] = 0.0;
tmp_3[4] = -25900.0 * rtb_TmpSignalConversionAtSFun_m[10];
tmp_3[8] = 0.0;
tmp_3[12] = 0.0;
tmp_3[1] = 25900.0 * rtb_TmpSignalConversionAtSFun_m[10];
tmp_3[5] = 0.0;
tmp_3[9] = 0.0;
tmp_3[13] = 0.0;
tmp_3[2] = 0.0;
tmp_3[6] = 0.0;
tmp_3[10] = 0.0;
tmp_3[14] = 0.0;
tmp_3[3] = 0.0;
tmp_3[7] = 0.0;
tmp_3[11] = 0.0;
tmp_3[15] = 0.0;
tmp_4[0] = 0.0;
tmp_4[4] = 0.0;
tmp_4[8] = 0.0;
tmp_4[12] = (-17430.0 * rtb_TmpSignalConversionAtSFun_m[8] - -13160.0 * rtb_TmpSignalConversionAtSFun_m[9]) - -6190.0 * rtb_TmpSignalConversionAtSFun_m[10];
tmp_4[1] = 0.0;
tmp_4[5] = 0.0;
tmp_4[9] = 0.0;
tmp_4[13] = 970.0 * rtb_TmpSignalConversionAtSFun_m[7];
tmp_4[2] = 0.0;
tmp_4[6] = 0.0;
tmp_4[10] = 0.0;
tmp_4[14] = 0.0;
tmp_4[3] = (17430.0 * rtb_TmpSignalConversionAtSFun_m[8] + -13160.0 * rtb_TmpSignalConversionAtSFun_m[9]) + -6190.0 * rtb_TmpSignalConversionAtSFun_m[10];
tmp_4[7] = -970.0 * rtb_TmpSignalConversionAtSFun_m[7];
tmp_4[11] = 0.0;
tmp_4[15] = 0.0;
for (i = 0; i < 4; i++) {
    alpha_as_idx_1 = tmp_3[i + 12] * rtb_TmpSignalConversionAtSFun_m[10] + (tmp_3[i + 8] * rtb_TmpSignalConversionAtSFun_m[9] + (tmp_3[i + 4] * rtb_TmpSignalConversionAtSFun_m[8] + tmp_3[i] * rtb_TmpSignalConversionAtSFun_m[7]));
    tmp_5[i] = alpha_as_idx_1;
}
for (i = 0; i < 4; i++) {
    alpha_as_idx_1 = tmp_4[i + 12] * rtb_TmpSignalConversionAtSFun_m[10] + (tmp_4[i + 8] * rtb_TmpSignalConversionAtSFun_m[9] + (tmp_4[i + 4] * rtb_TmpSignalConversionAtSFun_m[8] + tmp_4[i] * rtb_TmpSignalConversionAtSFun_m[7]));
    tmp_6[i] = alpha_as_idx_1;
}
nu_dot[0] = tmp_5[0] + tmp_6[0];
nu_dot[1] = tmp_5[1] + tmp_6[1];
nu_dot[2] = tmp_5[2] + tmp_6[2];
nu_dot[3] = tmp_5[3] + tmp_6[3];
for (i = 0; i < 16; i++) {
    M_0[i] = -M[i];
}
%<(SLibCGCallSubFcn("SailingYachtModel2_mldivide", ["M_0", "nu_dot"], 0, 5, 7))>;
e[0] = (-rtb_DLookupTable1 * sin(alpha_ak) + alpha_as * cos(alpha_ak)) + rtb_DLookupTable3 * cos(v_akv);
e[1] = (-rtb_DLookupTable1 * cos(alpha_ak) - alpha_as * sin(alpha_ak)) + -rtb_DLookupTable3 * sin(v_akv) * cos(rtb_TmpSignalConversionAtSFun_m[5]);
e[2] = (-(-rtb_DLookupTable1 * cos(alpha_ak) - alpha_as * sin(alpha_ak)) * -0.58 + rtb_DLookupTable3 * sin(v_akv) * cos(rtb_TmpSignalConversionAtSFun_m[5]) * -1.18) + 120000.0 * eta_dot[2] * fabs(eta_dot[2]);
e[3] = (-(rtb_DLookupTable1 * cos(alpha_ak) + alpha_as * sin(alpha_ak)) * 0.0 + -rtb_DLookupTable3 * sin(v_akv) * cos(rtb_TmpSignalConversionAtSFun_m[5]) * 0.0) + 50000.0 * eta_dot[3] * fabs(eta_dot[3]) * cos(rtb_TmpSignalConversionAtSFun_m[5]);
%<(SLibCGCallSubFcn("SailingYachtModel2_mldivide", ["M", "e"], 0, 5, 8))>;
nu[0] = 0.0;
nu[1] = 0.0;
nu[2] = (rtb_DLookupTable * rtb_DLookupTable * -5.89 + 8160.0 * rtb_DLookupTable) + -rtb_TmpSignalConversionAtSFun_m[2] * 60000.0 * 3.6 * cos(rtb_TmpSignalConversionAtSFun_m[5]);
nu[3] = -rtb_TmpSignalConversionAtSFun_m[2] * 60000.0 * -8.0 * sin(fabs(rtb_TmpSignalConversionAtSFun_m[5]));
%<(SLibCGCallSubFcn("SailingYachtModel2_mldivide", ["M", "nu"], 0, 5, 9))>;
D_hull[0] = (Ls * sin(alpha_aw) - Ds * cos(alpha_aw)) + (Lr * sin(alpha_ar) - rtb_DLookupTable4 * cos(alpha_ar));
D_hull[1] = (Ls * cos(alpha_aw) + Ds * sin(alpha_aw)) + (Lr * cos(alpha_ar) + rtb_DLookupTable4 * sin(alpha_ar));
D_hull[2] = -(Ls * cos(alpha_aw) + Ds * sin(alpha_aw)) * -11.58 + -(Lr * cos(alpha_ar) + rtb_DLookupTable4 * sin(alpha_ar)) * -0.78;
D_hull[3] = (-(Ls * sin(alpha_aw) - Ds * cos(alpha_aw)) * 0.6 * sin(delta_s) + (Ls * cos(alpha_aw) + Ds * sin(alpha_aw)) * (0.3 - 0.6 * cos(delta_s))) + (Lr * cos(alpha_ar) + rtb_DLookupTable4 * sin(alpha_ar)) * -8.2;
%<(SLibCGCallSubFcn("SailingYachtModel2_mldivide", ["M", "D_hull"], 0, 5, 10))>;
nu_dot[0] = ((nu_dot[0] - e[0]) - nu[0]) + D_hull[0];
nu_dot[1] = ((nu_dot[1] - e[1]) - nu[1]) + D_hull[1];
nu_dot[2] = ((nu_dot[2] - e[2]) - nu[2]) + D_hull[2];
/* '<S4>:1:210' */
/*  output the derivative of the state extended with the sail angle */
/* '<S4>:1:213' */
SailingYachtModel2_B.X_dot_ext[0] = eta_dot[0];
SailingYachtModel2_B.X_dot_ext[1] = eta_dot[1];
SailingYachtModel2_B.X_dot_ext[2] = eta_dot[2];
SailingYachtModel2_B.X_dot_ext[3] = eta_dot[3];
SailingYachtModel2_B.X_dot_ext[4] = nu_dot[0];
SailingYachtModel2_B.X_dot_ext[5] = nu_dot[1];
SailingYachtModel2_B.X_dot_ext[6] = nu_dot[2];
SailingYachtModel2_B.X_dot_ext[7] = ((nu_dot[3] - e[3]) - nu[3]) + D_hull[3];
SailingYachtModel2_B.X_dot_ext[8] = delta_s;
/* SignalConversion: '<Root>/TmpSignal ConversionAtVR Sailing Yacht AnimationInport4' incorporates:
 *  Constant: '<S2>/Yaw Axis of Rotation'
 */
rtb_TmpSignalConversionAtVRSa_b[0] = SailingYachtModel2_P.YawAxisofRotation_Value[0];
rtb_TmpSignalConversionAtVRSa_b[1] = SailingYachtModel2_P.YawAxisofRotation_Value[1];
rtb_TmpSignalConversionAtVRSa_b[2] = SailingYachtModel2_P.YawAxisofRotation_Value[2];
rtb_TmpSignalConversionAtVRSa_b[3] = SailingYachtModel2_B.X_dot_ext[8];
/* SignalConversion: '<Root>/TmpSignal ConversionAtVR Sailing Yacht AnimationInport5' incorporates:
 *  Constant: '<S2>/Yaw Axis of Rotation'
 */
rtb_TmpSignalConversionAtVRS_bd[0] = SailingYachtModel2_P.YawAxisofRotation_Value[0];
rtb_TmpSignalConversionAtVRS_bd[1] = SailingYachtModel2_P.YawAxisofRotation_Value[1];
rtb_TmpSignalConversionAtVRS_bd[2] = SailingYachtModel2_P.YawAxisofRotation_Value[2];
rtb_TmpSignalConversionAtVRS_bd[3] = SailingYachtModel2_B.rudderanglesaturation;
if (%<(SLibCGIRIsSampleHit(1, 5))>) {
    /* Gain: '<S2>/z - y3' incorporates:
 *  Constant: '<S2>/Yaw Axis of Rotation1'
 */
    SailingYachtModel2_B.zy3[0] = SailingYachtModel2_P.zy3_Gain * SailingYachtModel2_P.YawAxisofRotation1_Value[0];
    SailingYachtModel2_B.zy3[1] = SailingYachtModel2_P.zy3_Gain * SailingYachtModel2_P.YawAxisofRotation1_Value[1];
    SailingYachtModel2_B.zy3[2] = SailingYachtModel2_P.zy3_Gain * SailingYachtModel2_P.YawAxisofRotation1_Value[2];
}
/* SignalConversion: '<Root>/TmpSignal ConversionAtVR Sailing Yacht AnimationInport6' incorporates:
 *  Constant: '<Root>/Wind direction angle'
 */
rtb_TmpSignalConversionAtVRS_im[0] = SailingYachtModel2_B.zy3[0];
rtb_TmpSignalConversionAtVRS_im[1] = SailingYachtModel2_B.zy3[1];
rtb_TmpSignalConversionAtVRS_im[2] = SailingYachtModel2_B.zy3[2];
rtb_TmpSignalConversionAtVRS_im[3] = SailingYachtModel2_P.par.alpha_w;
%<tlcOutputsFcnOfS5B15>\
%<tlcOutputsFcnOfS5B16>\
if (%<(SLibCGIRIsSampleHit(1, 5))>) {
%<tlcOutputsFcnOfS5B17>\
%<tlcOutputsFcnOfS5B18>\
}
%<SLibInsertSolverResetCode()>\
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 5, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
