%implements s5_b0_tqcjg_Functions "C"

%function rt_atan2d_snf_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
real_T y;
int32_T u0_0;
int32_T u1_0;
if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else if (rtIsInf(u0) && rtIsInf(u1)) {
    if (u0 > 0.0) {
        u0_0 = 1;
    } else {
        u0_0 = -1;
    }
    if (u1 > 0.0) {
        u1_0 = 1;
    } else {
        u1_0 = -1;
    }
    y = atan2(u0_0, u1_0);
} else if (u1 == 0.0) {
    if (u0 > 0.0) {
        y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
        y = -(RT_PI / 2.0);
    } else {
        y = 0.0;
    }
} else {
    y = atan2(u0, u1);
}
return y;
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_atan2d_snf(\
%assign comma = ""
%<comma>real_T u0\
%assign comma = ", "
%<comma>real_T u1\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 0, fcnProtoType)>
%return fcnBuff
%endfunction

%function rt_roundd_snf_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
real_T y;
if (fabs(u) < 4.503599627370496E+15) {
    if (u >= 0.5) {
        y = floor(u + 0.5);
    } else if (u > -0.5) {
        y = u * 0.0;
    } else {
        y = ceil(u - 0.5);
    }
} else {
    y = u;
}
return y;
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_roundd_snf(\
%assign comma = ""
%<comma>real_T u\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 1, fcnProtoType)>
%return fcnBuff
%endfunction

%function SailingYachtModel2_mldivide_Fcn2(block) void
%assign fcnBuff = ""
%openfile fcnBuff
real_T temp;
real_T b_A[16];
int8_T ipiv[4];
int32_T j;
int32_T c;
int32_T ix;
real_T s;
int32_T jy;
int32_T c_ix;
int32_T d;
int32_T ijA;
int32_T b_kAcol;
memcpy(&b_A[0], &A[0], sizeof(real_T) << 4U);
ipiv[0] = 1;
ipiv[1] = 2;
ipiv[2] = 3;
for (j = 0; j < 3; j++) {
    c = j * 5;
    jy = 0;
    ix = c;
    temp = fabs(b_A[c]);
    for (b_kAcol = 2; b_kAcol <= 4 - j; b_kAcol++) {
        ix++;
        s = fabs(b_A[ix]);
        if (s > temp) {
            jy = b_kAcol - 1;
            temp = s;
        }
    }
    if (b_A[c + jy] != 0.0) {
        if (jy != 0) {
            ipiv[j] = (int8_T)((j + jy) + 1);
            b_kAcol = j + jy;
            temp = b_A[j];
            b_A[j] = b_A[b_kAcol];
            b_A[b_kAcol] = temp;
            ix = j + 4;
            b_kAcol += 4;
            temp = b_A[ix];
            b_A[ix] = b_A[b_kAcol];
            b_A[b_kAcol] = temp;
            ix += 4;
            b_kAcol += 4;
            temp = b_A[ix];
            b_A[ix] = b_A[b_kAcol];
            b_A[b_kAcol] = temp;
            ix += 4;
            b_kAcol += 4;
            temp = b_A[ix];
            b_A[ix] = b_A[b_kAcol];
            b_A[b_kAcol] = temp;
        }
        ix = (c - j) + 4;
        for (b_kAcol = c + 1; b_kAcol + 1 <= ix; b_kAcol++) {
            b_A[b_kAcol] /= b_A[c];
        }
    }
    b_kAcol = c;
    jy = c + 4;
    for (ix = 1; ix <= 3 - j; ix++) {
        temp = b_A[jy];
        if (b_A[jy] != 0.0) {
            c_ix = c + 1;
            d = (b_kAcol - j) + 8;
            for (ijA = 5 + b_kAcol; ijA + 1 <= d; ijA++) {
                b_A[ijA] += b_A[c_ix] * -temp;
                c_ix++;
            }
        }
        jy += 4;
        b_kAcol += 4;
    }
}
if (ipiv[0] != 1) {
    temp = B[0];
    B[0] = B[ipiv[0] - 1];
    B[ipiv[0] - 1] = temp;
}
if (ipiv[1] != 2) {
    temp = B[1];
    B[1] = B[ipiv[1] - 1];
    B[ipiv[1] - 1] = temp;
}
if (ipiv[2] != 3) {
    temp = B[2];
    B[2] = B[ipiv[2] - 1];
    B[ipiv[2] - 1] = temp;
}
if (B[0] != 0.0) {
    for (jy = 1; jy + 1 < 5; jy++) {
        B[jy] -= B[0] * b_A[jy];
    }
}
if (B[1] != 0.0) {
    for (jy = 2; jy + 1 < 5; jy++) {
        B[jy] -= b_A[jy + 4] * B[1];
    }
}
if (B[2] != 0.0) {
    for (jy = 3; jy + 1 < 5; jy++) {
        B[jy] -= b_A[jy + 8] * B[2];
    }
}
if (B[3] != 0.0) {
    B[3] /= b_A[15];
    for (jy = 0; jy + 1 < 4; jy++) {
        B[jy] -= b_A[jy + 12] * B[3];
    }
}
if (B[2] != 0.0) {
    B[2] /= b_A[10];
    for (jy = 0; jy + 1 < 3; jy++) {
        B[jy] -= b_A[jy + 8] * B[2];
    }
}
if (B[1] != 0.0) {
    B[1] /= b_A[5];
    for (jy = 0; jy + 1 < 2; jy++) {
        B[jy] -= b_A[jy + 4] * B[1];
    }
}
if (B[0] != 0.0) {
    B[0] /= b_A[0];
}
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void SailingYachtModel2_mldivide(\
%assign comma = ""
%<comma>const real_T A[16]\
%assign comma = ", "
%<comma>real_T B[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%return fcnBuff
%endfunction

